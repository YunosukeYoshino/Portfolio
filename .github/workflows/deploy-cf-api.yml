name: Deploy via Cloudflare API Only

on:
  workflow_dispatch:
    inputs:
      account_id:
        description: 'Cloudflare Account ID'
        required: true
        type: string
      project_name:
        description: 'Project Name'
        required: true
        default: 'yunosuke-portfolio'
        type: string

permissions:
  contents: read

env:
  BUN_VERSION: 'latest'

jobs:
  api-deploy:
    runs-on: ubuntu-latest
    name: Deploy via Pure Cloudflare API
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install
        
      - name: Build application
        run: bun run build
        env:
          MICROCMS_SERVICE_DOMAIN: ${{ secrets.MICROCMS_SERVICE_DOMAIN }}
          MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}
          SITE_URL: https://${{ inputs.project_name }}.pages.dev
          
      - name: Check Project Exists
        id: check_project
        run: |
          echo "üîç Checking if project exists..."
          
          PROJECT_CHECK=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${{ inputs.account_id }}/pages/projects/${{ inputs.project_name }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")
          
          echo "project_check<<EOF" >> $GITHUB_OUTPUT
          echo "$PROJECT_CHECK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if echo "$PROJECT_CHECK" | grep -q '"success":true'; then
            echo "‚úÖ Project exists"
            echo "project_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Project does not exist"
            echo "project_exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Project if Not Exists
        if: steps.check_project.outputs.project_exists == 'false'
        run: |
          echo "üìù Creating new project: ${{ inputs.project_name }}"
          
          CREATE_RESPONSE=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/accounts/${{ inputs.account_id }}/pages/projects" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{
              \"name\": \"${{ inputs.project_name }}\",
              \"production_branch\": \"main\",
              \"build_config\": {
                \"build_command\": \"bun run build\",
                \"destination_dir\": \"out\",
                \"root_dir\": \"\"
              }
            }")
          
          echo "Create Response:"
          echo "$CREATE_RESPONSE"
          
          if echo "$CREATE_RESPONSE" | grep -q '"success":true'; then
            echo "‚úÖ Project created successfully"
          else
            echo "‚ùå Project creation failed"
            exit 1
          fi
          
      - name: Create Deployment
        run: |
          echo "üöÄ Creating deployment..."
          
          DEPLOY_RESPONSE=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/accounts/${{ inputs.account_id }}/pages/projects/${{ inputs.project_name }}/deployments" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{
              \"branch\": \"main\",
              \"production\": true
            }")
          
          echo "Deploy Response:"
          echo "$DEPLOY_RESPONSE"
          
          if echo "$DEPLOY_RESPONSE" | grep -q '"success":true'; then
            DEPLOYMENT_ID=$(echo "$DEPLOY_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
            echo "‚úÖ Deployment created with ID: $DEPLOYMENT_ID"
            echo "üì¶ Deployment URL: https://${{ inputs.project_name }}.pages.dev"
          else
            echo "‚ùå Deployment creation failed"
            exit 1
          fi
          
      - name: Upload Files Info
        run: |
          echo "üìÅ Build completed successfully!"
          echo "üìÑ Files ready for upload:"
          ls -la out/
          echo ""
          echo "‚ö†Ô∏è  Note: Direct file upload via API requires complex multipart form-data handling."
          echo "üîß Use Wrangler CLI or Cloudflare Dashboard to upload files."
          echo ""
          echo "üåê Alternative: Use Wrangler in next step"
          
      - name: Deploy Files with Wrangler (Alternative)
        run: |
          echo "üöÄ Attempting deployment with Wrangler as fallback..."
          
          # WranglerÁµåÁî±„Åß„Éá„Éó„É≠„Ç§„ÇíË©¶Ë°å
          CLOUDFLARE_API_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          CLOUDFLARE_ACCOUNT_ID="${{ inputs.account_id }}" \
          bunx wrangler pages deploy out --project-name=${{ inputs.project_name }} || echo "Wrangler deployment failed"
          
      - name: Deployment Summary
        run: |
          echo "## üìä Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Account ID**: ${{ inputs.account_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: https://${{ inputs.project_name }}.pages.dev" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Ready for file upload" >> $GITHUB_STEP_SUMMARY