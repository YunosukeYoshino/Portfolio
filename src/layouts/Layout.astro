---
import { SEO, Props as AstroSeoProps } from "astro-seo";
import Header from "../components/Header.astro";
import LocalScripts from "../components/LocalScripts.astro";

export type Props = AstroSeoProps & {
  title: string;
  description: string;
};

import "destyle.css";
import "src/assets/scss/style.scss";
import "src/assets/css/app.css";
const { title, description, ...seoProps }: Props = Astro.props;
---

<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <meta name="format-detection" content="email=no,telephone=no,address=no" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <!-- アイコン画像の指定 -->
    <link rel="icon" type="image/png" href="/assets/icons/icon-72x72.png" sizes="72x72" />
    <link rel="icon" type="image/png" href="/assets/icons/icon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/png" href="/assets/icons/icon-128x128.png" sizes="128x128" />
    <link rel="manifest" href="/manifest.json" />
    <title>{title}</title>
    <SEO {...seoProps} />
    <LocalScripts />
    <script
      type="text/javascript"
      src="//typesquare.com/3/tsst/script/ja/typesquare.js?641200e6ba2c4c9ea7f95bf7ac1e02e5"
      charset="utf-8"
    ></script>
    <style>
      .p-loader {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 99;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        backdrop-filter: blur(90px);
        background-image: url("/assets/images/noise.png");
        opacity: 1;
        transition: 0.4s ease-out opacity;
      }

      .p-loader__circle::before {
        z-index: 1;
        display: inline-block;
        width: 20px;
        height: 20px;
        content: "";
        background: rgb(111 180 236);
        background: linear-gradient(90deg, rgb(111 180 236 / 100%) 0%, rgb(204 207 245 / 100%) 100%);
        border-radius: 50%;

        /* animation: sk-scale 1.5s infinite ease-in-out; */
      }

      .p-loader__circle::after {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        display: inline-block;
        width: 400px;
        height: 400px;
        margin: auto;
        content: "";
        background: rgb(111 180 236);
        background: linear-gradient(90deg, rgb(111 180 236 / 100%) 0%, rgb(204 207 245 / 100%) 100%);
        border-radius: 50%;
        animation: sk-scaleout 1.5s infinite ease-in-out;
      }

      /* .isLoaded .p-loader {
        pointer-events: none;
        opacity: 0;
      } */

      @keyframes sk-scaleout {
        0% {
          opacity: 0.6;
          transform: scale(0);
        }

        100% {
          opacity: 0;
          transform: scale(1);
        }
      }

      @keyframes sk-scale {
        0% {
          transform: scale(1);
        }

        100% {
          transform: scale(1.2);
        }
      }

      #gradient-canvas {
        position: fixed;
        top: 0;
        z-index: var(--z-canvas);
        width: 100%;
        height: 100%;

        --gradient-color-1: #6fb4ec;
        --gradient-color-2: #bcecf0;
        --gradient-color-3: #b49cf2;
        --gradient-color-4: #cccff5;
      }
    </style>
  </head>
  <body>
    <canvas id="gradient-canvas" data-transition-in></canvas>
    <div class="p-loader">
      <div class="p-loader__circle"></div>
    </div>

    <div class="p-wrapper">
      <Header />
      <main class="l-main js-main">
        <slot />
      </main>
    </div>
    <script>
      import { Gradient } from "../library/Gradient";

      document.addEventListener("DOMContentLoaded", () => {
        // Create your instance
        const gradient = new Gradient();
        // Call `initGradient` with the selector to your canvas
        gradient.initGradient("#gradient-canvas");
      });

      const loadingElement = document.querySelector(".p-loader") as HTMLElement;
    </script>
  </body>
</html>
